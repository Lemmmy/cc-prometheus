plugins {
    id 'fabric-loom' version '0.11-SNAPSHOT'
    id 'maven-publish'
    id 'idea'
}

archivesBaseName = "cc-prometheus-fabric-${minecraft_version}"

repositories {
    maven { url 'https://jitpack.io' }

    // Needed for CC:R's deps
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases" }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

    implementation project(":common")

    modImplementation "com.github.cc-tweaked:cc-restitched:${ccr_version}"

    // IDK how Fabric config works (so much seems to be client-only??), so just copy CC:R.
    implementation 'com.electronwill.night-config:toml:3.6.5'
    include 'com.electronwill.night-config:core:3.6.5'
    include 'com.electronwill.night-config:toml:3.6.5'

    implementation "io.prometheus:simpleclient:${prometheus_version}"
    implementation "io.prometheus:simpleclient_httpserver:${prometheus_version}"
    implementation "io.prometheus:simpleclient_hotspot:${prometheus_version}"

    // ./gradlew fabric:dependencies | grep prometheus | sed -e 's/^[\|+ \\-]*//' | sed -e 's/ (.)$//' | sort -u
    include "io.prometheus:simpleclient:${prometheus_version}"
    include "io.prometheus:simpleclient_common:${prometheus_version}"
    include "io.prometheus:simpleclient_hotspot:${prometheus_version}"
    include "io.prometheus:simpleclient_httpserver:${prometheus_version}"
    include "io.prometheus:simpleclient_tracer_common:${prometheus_version}"
    include "io.prometheus:simpleclient_tracer_otel:${prometheus_version}"
    include "io.prometheus:simpleclient_tracer_otel_agent:${prometheus_version}"
}

loom {
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run/server")
        }
    }
}


processResources {
    from project(":common").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile) {
    source(project(":common").sourceSets.main.allSource)
}

jar {
    from("LICENSE") {
        rename { "${it}_${mod_name}" }
    }
}
